import config
from config import Commands
from telebot import types


class Message:
    def __init__(self):
        self.markup = None
        self.text = None
        self.action = None
        self.nextdef = None
        self.fieldname = None
        self.obj = None


    def text_input(self, text):
        self.text = str(text)
        return self.text


class StartMessage(Message):
    def admin_message(self, user_id, user_status, end_date):
        self.text = f'–í–∞—à ID: {user_id}\n–°—Ç–∞—Ç—É—Å: {user_status} –¥–æ {end_date}'
        btn1 = types.InlineKeyboardButton('–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∫—É–ø–æ–Ω', callback_data='—Åoupon_activate')
        btn2 = types.InlineKeyboardButton('–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', callback_data='settings')
        btn3 = types.InlineKeyboardButton('–û—Å–æ–±–∏—Å—Ç–∏–π –∫–∞–±—ñ–Ω–µ—Ç', callback_data='cabinet')
        btn4 = types.InlineKeyboardButton('–¢–µ—Ö. –ø—ñ–¥—Ç—Ä–∏–º–∫–∞', callback_data='support')
        markup = types.InlineKeyboardMarkup(row_width=2)
        self.markup = markup.add(btn1, btn2, btn3, btn4)
        self.action = 'send'

    def user_message(self):
        self.text = f'Hello User'
        btn1 = types.InlineKeyboardButton('–°–ø–ª–∞—Ç–∏—Ç–∏', callback_data='pay')
        markup = types.InlineKeyboardMarkup(row_width=2)
        self.markup = markup.add(btn1)
        self.action = 'send'




class CouponActivateMessage(Message):
    def __init__(self, coupon):
        super().__init__()
        self.coupon_status = None
        self.coupon_end_date = None
        self.coupon = coupon

    def get_coupon_data(self):
        self.coupon_status = self.coupon.coupon_status
        self.coupon_end_date = self.coupon.end_date

    def input(self):
        self.text = '–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–º–µ—Ä –∫—É–ø–æ–Ω—É (6 —Ü–∏—Ñ—Ä)'
        self.action = 'input'

    def admin_message(self):
        if self.coupon_status == 'active':
            self.text = '–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
        elif self.coupon_status == 'activated':
            self.text = '–ö—É–ø–æ–Ω –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞–≤—Å—è'
        elif self.coupon_status == 'expired':
            self.text = f'–ó–∞–∫—ñ–Ω—á–∏–≤—Å—è —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó –∫—É–ø–æ–Ω—É \n(–¥—ñ—è–≤ –¥–æ {self.coupon_end_date})'
        elif self.coupon_status is None:
            self.text = '–¢–∞–∫–∏–π –∫—É–ø–æ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ'
        self.markup = None
        self.action = 'send'

    def client_message_success(self):
        self.text = '–ö—É–ø–æ–Ω –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
        self.markup = None
        self.action = 'send'


class AdminSettingsMessage(Message):
    def __init__(self, manychat_api, coupons, bonuses):
        super().__init__()
        self.text = f'<b>Manychat API: </b>{manychat_api} \n\n<b>–ö—É–ø–æ–Ω–∏: </b>\n<i>(–Ω–∞–∑–≤–∞ - –≤–∞—Ä—Ç—ñ—Å—Ç—å —É –±–∞–ª–∞—Ö - —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó)</i>\n{coupons}\n\n<b>–ë–æ–Ω—É—Å–∏:</b>\n{bonuses}\n\n<b><i>–©–æ –≤–∏ —Ö–æ—á–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–±–æ –∑–º—ñ–Ω–∏—Ç–∏?</i></b>'
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('–ö—É–ø–æ–Ω–∏', callback_data='change_coupons')
        btn2 = types.InlineKeyboardButton('–ë–∞–ª–∏', callback_data='change_points')
        btn3 = types.InlineKeyboardButton('Manychat API', callback_data='change_manychat_api')
        btn4 = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='start')
        self.markup = markup.add(btn1, btn2, btn3, btn4)
        self.action = 'send'


class ChangeCouponsMessage(Message):
    def message(self, coupon_data):
        coupon_name = coupon_data['coupon_name']
        coupon_cost = coupon_data['coupon_cos']
        coupon_time = coupon_data['coupon_time']
        coupon_description = coupon_data['coupon_description']
        coupon_i = coupon_data['coupon_i']
        coupon_info = f'<b>üÜé –ù–∞–∑–≤–∞</b>: {coupon_name}\n<b>üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å —É –±–∞–ª–∞—Ö:</b> {coupon_cost}\n<b>üìÜ - –¢–µ—Ä–º—ñ–Ω –¥—ñ—ó:</b> {coupon_time} –¥–Ω—ñ–≤\n<b>‚ÑπÔ∏è –û–ø–∏—Å:</b> {coupon_description}'
        self.text = coupon_info + "\n\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n<i><b>–ó–º—ñ–Ω–∏—Ç–∏:</b>\nüÜé - –Ω–∞–∑–≤—É, üí∞ - –≤–∞—Ä—Ç—ñ—Å—Ç—å —É –±–∞–ª–∞—Ö, üìÜ - —Ç–µ—Ä–º—ñ–Ω –¥—ñ—ó, ‚Ñπ - –æ–ø–∏—Å, üóë - –≤–∏–¥–∞–ª–∏—Ç–∏</i>"
        markup = types.InlineKeyboardMarkup(row_width=5)
        btn1 = types.InlineKeyboardButton('üÜé', callback_data='changecoupon_name_' + coupon_i)
        btn2 = types.InlineKeyboardButton('üí∞', callback_data=f'changecoupon_cost_' + coupon_i)
        btn3 = types.InlineKeyboardButton('üìÜ', callback_data=f'changecoupon_time_' + coupon_i)
        btn4 = types.InlineKeyboardButton('‚Ñπ', callback_data=f'changecoupon_description_' + coupon_i)
        btn5 = types.InlineKeyboardButton('üóë', callback_data=f'changecoupon_delete' + coupon_i)
        self.markup = markup.add(btn1, btn2, btn3, btn4, btn5)
        self.action = 'send'


class ChangePointsMessage(Message):
    pass


class SetManychatApiMessage(Message):
    def __init__(self):
        super().__init__()
        self.text = None
        self.action = None

    def input(self):
        self.text = '<b>–ü—Ä–∏—à–ª—ñ—Ç—å –∫–æ–¥ Manychat API</b>\n–î–ª—è —Ü—å–æ–≥–æ –∑–∞–π–¥—ñ—Ç—å –≤ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Manychat, —É —Ä–æ–∑–¥—ñ–ª API —Ç–∞ —Å–∫–æ–ø—ñ—é–π—Ç–µ –∫–æ–¥ (–∞–±–æ —Å–ø–æ—á–∞—Ç–∫—É –∑–≥–µ–Ω–µ—Ä—É–π—Ç–µ, —è–∫—â–æ –ø–æ–ª–µ –ø—É—Å—Ç–µ)'
        self.action = 'input'

    def check(self, bot_url):
        self.text = f'<b>–ù–∞–ø–∏—à—ñ—Ç—å —Å–ª–æ–≤–æ "–ê–¥–º—ñ–Ω" —Å–≤–æ—î–º—É –±–æ—Ç—É {bot_url}</b>'


    def success(self):
        self.text = 'Manychat API –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
        self.action = 'send'


class AdminCabinet(Message):
    pass


class NewAdmin(Message):
    def __init__(self, user):
        super().__init__()
        if user.status:
            self.text = '–í—ñ—Ç–∞—é, –Ω–æ–≤–∏–π –ê–¥–º—ñ–Ω–µ\n–Ø –¥–æ–ø–æ–º–æ–∂—É —Ç–æ–±—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —Ç–≤—ñ–π –ß–∞—Ç–±–æ—Ç –õ–æ—è–ª—å–Ω–æ—Å—Ç—ñ.\n<b><i>–¢–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É –ü–æ—á–∞—Ç–∏</i></b>'
            btn1 = types.InlineKeyboardButton('–ü–æ—á–∞—Ç–∏', callback_data='start_manual')
            markup = types.InlineKeyboardMarkup(row_width=2)
            self.markup = markup.add(btn1)
        else:
            self.text = 'admin is already exists in db'
        self.action = 'send'




class Manual(Message):
    def __init__(self):
        super().__init__()
        self.text = None
        self.markup = None

    def start(self):
        self.text = '<b>–Ø–∫ —Ö–æ—á–µ—à –ø—Ä–∏—î–¥–Ω–∞—Ç–∏ –ß–∞—Ç–±–æ—Ç –õ–æ—è–ª—å–Ω–æ—Å—Ç—ñ?</b>\n\n–í–∏–±–µ—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç:\n<b><i>1 - C–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –±–æ—Ç\n2 - –ü—Ä–∏—î–¥–Ω–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –±–æ—Ç—É –≤ Manychat'
        self.markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π')
        btn2 = types.InlineKeyboardButton('–ü—Ä–∏—î–¥–Ω–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ')
        self.markup.add(btn1, btn2)

    def start_answer(self, answer):
        self.markup = None
        self.text = None
        if answer == '–°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π':  # —â–µ –Ω–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
            self.text = f'–¢–æ–¥—ñ –∑—Ä–æ–±–∏ —Ü—ñ –∫—Ä–æ–∫–∏:\n\n1. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–π—Å—è –≤ Manychat –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º: {config.manychat_ref_url}, –∞–±–æ —É–≤—ñ–π–¥–∏, —è–∫—â–æ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π\n2. –°–≤–æ—Ä–∏ –Ω–æ–≤–∏–π –ø—Ä–æ–µ–∫—Ç —Ç–∞ –∞–∫—Ç–∏–≤—É–π –¥–ª—è –Ω—å–æ–≥–æ Pro-–∞–∫–∞—É–Ω—Ç (–Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –¥–ª—è —Ä–æ–±–æ—Ç–∏ —à–∞–±–ª–æ–Ω—É, –ø–µ—Ä—à—ñ 7+ –¥—ñ–± –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ).\n3. –ó–∞–π–¥–∏ –≤ –ù–∞–ª–∞—à—Ç—É–Ω–∫–∏(Settings) Manychat -> —Ä–æ–∑–¥—ñ–ª API —Ç–∞ —Å–∫–æ–ø—ñ—é–π API-–∫–ª—é—á (–∑–≥–µ–Ω–µ—Ä—É–π –∫–æ–¥, —è–∫—â–æ –ø–æ–ª–µ –ø—É—Å—Ç–µ)\n\n<b><i>4. –í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π API-–∫–ª—é—á</i></b>'

        elif answer == '–ü—Ä–∏—î–¥–Ω–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ': # –ø—Ä–∏—î–¥–Ω–∞—Ç–∏ –¥–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –±–æ—Ç—É
            self.text = '–û–∫. –¢–æ–¥—ñ –∑–∞–π–¥–∏ –≤ –ù–∞–ª–∞—à—Ç—É–Ω–∫–∏ Manychat -> —Ä–æ–∑–¥—ñ–ª API —Ç–∞ —Å–∫–æ–ø—ñ—é–π API-–∫–ª—é—á (–∑–≥–µ–Ω–µ—Ä—É–π, —è–∫—â–æ –ø–æ–ª–µ –ø—É—Å—Ç–µ)\n<b><i>–í—ñ–¥–ø—Ä–∞–≤ –º–µ–Ω—ñ —Å–∫–æ–ø—ñ–π–æ–≤–∞–Ω–∏–π API-–∫–ª—é—á</i></b>'

    def set_template(self, product_template_url):
        self.text = f'‚úÖ Manychat API –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n1. –¢–µ–ø–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∏ —à–∞–±–ª–æ–Ω –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º:\n{product_template_url}\n\n<b>2. –Ø–∫ –∑–∞–∫—ñ–Ω—á–∏—à —É—Å—Ç–∞–Ω–æ–≤–∫—É —à–∞–±–ª–æ–Ω—É, —Ç–∏—Å–Ω–∏ –∫–Ω–æ–ø–∫—É "–®–∞–±–ª–æ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"'
        self.markup = types.InlineKeyboardMarkup()
        btn1 = types.InlineKeyboardButton('–®–∞–±–ª–æ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', callback_data='template_installed')
        self.markup.add(btn1)

    def set_template_check(self):
        self.text = '–û–∫. –î–∞–≤–∞–π –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ, —á–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∞—Ü—é—î.\n\n–î–ª—è —Ü—å–æ–≥–æ –ø–µ—Ä–µ–π–¥–∏ —É —Å–≤—ñ–π –±–æ—Ç —Ç–∞ <b>–≤—ñ–¥–ø—Ä–∞–≤ –π–æ–º—É —Å–ª–æ–≤–æ <i>–ê–¥–º—ñ–Ω</i></b>'


    def template_success(self):
        self.text = '–í—ñ—Ç–∞—é! –®–∞–±–ª–æ–Ω –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ.'



class SetAdminBotData(Message):
    def __init__(self):
        super().__init__()
        self.text = f"–í—ñ–¥–ø—Ä–∞–≤ –ü—Å–µ–≤–¥–æ–Ω—ñ–º —Ç–≤–æ–≥–æ –±–æ—Ç—É (–±–µ–∑ @, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, loyaltybots_bot).\n–ó–Ω–∞–π—Ç–∏ –π–æ–≥–æ –º–æ–∂–µ—à –∞–±–æ —É –ø—Ä–æ—Ñ—ñ–ª—ñ —Å–∞–º–æ–≥–æ –±–æ—Ç—É (–≤ —ñ–Ω—Ñ–æ), –∞–±–æ —É @BotFather (—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ, –∫–æ–ª–∏ —Å—Ç–≤–æ—Ä—é–≤–∞–≤–∞–≤ –±–æ—Ç)"

    def input_bot_data_success(self, bot_username):
        self.text = f"–ë–æ—Ç @{bot_username} –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ"



class SetBonusPoints(Message):
    def __init__(self):
        super().__init__()
        self.text = '–¢–µ–ø–µ—Ä –¥–∞–≤–∞–π –Ω–∞–ª–∞—à—Ç—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –∑–∞ –∫–æ–∂–Ω—É –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º-–¥—ñ—é.'
        self.bonus_name = None
        self.bonus_points = None

    def input(self, bonus_name):
        self.bonus_name = bonus_name
        self.text = f'–°–∫—ñ–ª—å–∫–∏ –±–∞–ª—ñ–≤ –Ω–∞—Ä–∞—Ö–æ–≤—É—î–º–æ <b>{bonus_name}</b>?\n(–Ω–∞–ø–∏—à–∏ —Ç—ñ–ª—å–∫–∏ —á–∏—Å–ª–æ —Ü–∏—Ñ—Ä–∞–º–∏)'

    def set(self, bonus_points):
        self.bonus_points = bonus_points

    def answer_success(self):
        self.text = f'{self.bonus_name} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {self.bonus_points} –±–∞–ª—ñ–≤'

    def success(self):
        self.text = '–ë–∞–ª–∏ –∑–∞ –Ü–Ω—Å—Ç–∞–≥—Ä–∞–º-–¥—ñ—ó –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'


class SetCoupon(Message):
    def __init__(self):
        super().__init__()
        self.text = '–¢–µ–ø–µ—Ä –¥–∞–≤–∞–π—Ç–µ –Ω–∞–ª–∞—à—Ç—É—î–º–æ —Ö–æ—á–∞ –± 1 –∫—É–ø–æ–Ω'
        self.coupon_name = None
        self.coupon_cost = None

    def input_name(self):
        self.text = '<b>–í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –∫—É–ø–æ–Ω—É</b>\n(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ö—É–ø–æ–Ω100, –ö—É–ø–æ–Ω30%, –ö–∞–≤–∞)'

    def input_cost(self):
        self.text = f'<b>–ù–∞–ø–∏—à—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –±–∞–ª—ñ–≤ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫—É–ø–æ–Ω—É {self.coupon_name}</b>'

    def success(self):
        self.text = f'–ö—É–ø–æ–Ω {self.coupon_name} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ\n–ó–º—ñ–Ω–∏—Ç–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∏ –∫—É–ø–æ–Ω–∏ –≤–∏ –∑–º–æ–∂–µ—Ç–µ –ø–æ—Ç—ñ–º –≤ –û—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ –ø—ñ—Å–ª—è –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è –±–∞–∑–æ–≤–æ–≥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—É'
        self.button_name = '–ó—Ä–æ–∑—É–º—ñ–ª–æ'
        self.button_callback = ''





class Keyboard:
    def __init__(self, row_width):
        self.row_width = row_width
        self.markup = None


class Button:
    def __init__(self, btn_text, btn_url, btn_callback_data):
        self.btn_text = btn_text
        self.btn_url = btn_url
        self.btn_callback_data = btn_callback_data
        self.button = None


class InlineButton(Button):
    def button(self):
        self.button = types.InlineKeyboardButton(self.btn_text, url=self.btn_url, callback_data=self.btn_callback_data)


class KeyboardBack(Keyboard):
    pass


class MainMenu:
    def __init__(self):
        pass


class SendMessage(Message):
    pass

class UserInput(SendMessage):
    pass


class CommandsMessage(Message):
    def message(self):
        self.text = Commands().commands_list


class CommandsMessageSettings(Message):
    def message(self):
        text = Commands()
        self.text = text.commands_list
